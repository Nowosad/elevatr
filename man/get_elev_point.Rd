% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_elev_point.R
\name{get_elev_point}
\alias{get_elev_point}
\title{Get Point Elevation}
\usage{
get_elev_point(locations, prj = NULL, source = c("mapzen", "eqps"),
  api_key = NULL, ...)
}
\arguments{
\item{locations}{Either a \code{data.frame} with x (e.g. longitude) as the first column 
and y (e.g. latitude) as the second column or a 
\code{SpatialPoints}/\code{SpatialPointsDataFrame}.  
Elevation for these points will be returned.}

\item{prj}{A PROJ.4 string defining the projection of the locations argument. 
If a \code{SpatialPoints} or \code{SpatialPointsDataFrame} is 
provided, the PROJ.4 string will be taken from that.  This 
argument is required for a \code{data.frame} of locations.}

\item{source}{A character indicating which API to use, currently "mapzen" or 
"eqps".  Default is "mapzen".  Note that the Mapzen Elevation 
Service is subject to rate limits.  Keyless access limits 
requests to 1,000 requests per day, 6 per minute, and 1 per 
second.  With a Mapzen API key 
(\url{https://mapzen.com/developers/}) requests are limited to
20,000 per day or 2 per second.  Per day and per second rates
are enforced by the \code{\link{elevatr}} package.}

\item{api_key}{A valid Mapzen API key.  Not required, but higher rate limits
are allowed with a key. Defaults to 
\code{getOption("mapzen_key")}.}

\item{...}{Additional arguments passed to get_eqps or get_mapzen_elevation}
}
\value{
Function returns a \code{SpatialPointsDataFrame} in the projection 
        specified by the \code{prj} argument.
}
\description{
Several web services provide access to point elevations.  This function provides
access to several of those.  Currently it uses either the Mapzen Elevation 
Service or the USGS Elevation Point Query Service (US Only).  The function 
accepts a \code{data.frame} of x (long) and y (lat) or a 
\code{SpatialPoints}/\code{SpatialPointsDataFame} as input.  A 
SpatialPointsDataFrame is returned with elevation as an added 
\code{data.frame}.
}
\examples{
data(lake)
loc_df <- data.frame(x = runif(6,min=bbox(lake)[1,1], max=bbox(lake)[1,2]),
                     y = runif(6,min=bbox(lake)[2,1], max=bbox(lake)[2,2]))
get_elev_point(locations = loc_df, prj = sp::proj4string(lake))
}

